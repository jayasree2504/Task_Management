{"ast":null,"code":"var _jsxFileName = \"/home/hp/Task_manager_frontend/src/components/taskDashboard/taskDashboard.js\",\n  _s = $RefreshSig$();\n// components/TaskDashboard.js\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskDashboard() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(\"/api/tasks\").then(res => {\n      console.log('Response status:', res.status);\n      return res.json();\n    }).then(data => {\n      console.log('Fetched tasks:', data);\n      setTasks(data);\n    }).catch(error => {\n      console.error('Error fetching tasks:', error);\n    });\n  }, []);\n  console.log('Current tasks in state:', tasks); // Debug current state\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/edit-task/new\"),\n      children: \"Create New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.isArray(tasks) && tasks.length > 0 ? tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"task-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => navigate(`/edit-task/${task.id}`),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => navigate(`/add-subtask/${task.id}`),\n            children: \"Add Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tasks found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskDashboard, \"mP0t/edHjXqSrQwGHZvoFmDCs3M=\", false, function () {\n  return [useNavigate];\n});\n_c = TaskDashboard;\nexport default TaskDashboard;\nvar _c;\n$RefreshReg$(_c, \"TaskDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","TaskDashboard","_s","tasks","setTasks","navigate","fetch","then","res","console","log","status","json","data","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Array","isArray","length","map","task","className","title","description","id","_c","$RefreshReg$"],"sources":["/home/hp/Task_manager_frontend/src/components/taskDashboard/taskDashboard.js"],"sourcesContent":["// components/TaskDashboard.js\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction TaskDashboard() {\n    const [tasks, setTasks] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        fetch(\"/api/tasks\")\n            .then((res) => {\n                console.log('Response status:', res.status);\n                return res.json();\n            })\n            .then((data) => {\n                console.log('Fetched tasks:', data);\n                setTasks(data);\n            })\n            .catch((error) => {\n                console.error('Error fetching tasks:', error);\n            });\n    }, []);\n\n    console.log('Current tasks in state:', tasks); // Debug current state\n\n    return (\n        <div>\n            <h2>Task Dashboard</h2>\n            <button onClick={() => navigate(\"/edit-task/new\")}>Create New Task</button>\n            <ul>\n                {Array.isArray(tasks) && tasks.length > 0 ? (\n                    tasks.map((task) => (\n                        <li key={task.id} className=\"task-item\">\n                            <h3>{task.title}</h3>\n                            <p>{task.description}</p>\n                            <div className=\"task-buttons\">\n                                <button onClick={() => navigate(`/edit-task/${task.id}`)}>Edit</button>\n                                <button onClick={() => navigate(`/add-subtask/${task.id}`)}>Add Subtask</button>\n                            </div>\n                        </li>\n                    ))\n                ) : (\n                    <p>No tasks found</p>\n                )}\n            </ul>\n        </div>\n    );\n}\n\nexport default TaskDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}